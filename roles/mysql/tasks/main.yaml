---
- name: Install MySQL Server
  apt:
    name: mysql-server
    state: present

- name: Install Python
  apt:
    name: python3-pymysql
    state: present

- name: Copy Override Config
  template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
    mode: '0755'
  notify: Restart MySQL

- name: Enable and Start MySQL Server
  service:
    name: mysql
    state: started
    enabled: true

- name: MySQL Database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create MySQL User
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create MySQL Exporter User
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_user }}"
    password: "{{ mysql_exporter_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Template exporter_my.cnf
  template:
    src: exporter_my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
    mode: '0644'
    owner: prometheus
    group: prometheus
  no_log: true
  notify:
    - Restart MySQL Exporter
    - Restart MySQL

- name: Install MySQL Exporter
  apt:
    name: prometheus-mysqld-exporter
    state: present

- name: Enable and Start MySQL Exporter
  service:
    name: prometheus-mysqld-exporter
    state: started
    enabled: true

- name: Export Replica Status
  copy:
    src: prometheus-mysqld-exporter
    dest: /etc/default/prometheus-mysqld-exporter
  notify: Restart MySQL Exporter 

- name: Add MySQL Replication User
  community.mysql.mysql_user:
    name: "{{ mysql_replication_username }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock 

- name: Configure mysql dynamic variables for replica
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL Source
    - Reset MySQL Replica

- name: Create Restore Directory 
  file:
    path: /home/backup/restore/mysql
    state: directory
    owner: backup
    group: backup
    mode: 0777

- name: Create Backup Directory
  file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: 0777

- name: Create MySQL Backup User
  community.mysql.mysql_user:
    name: "{{ mysql_backup_user }}"
    password: "{{ mysql_backup_password }}"
    host: "%"
    resource_limits:
      MAX_USER_CONNECTIONS: 3
    priv: "agama.*:SELECT,LOCK TABLES"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Template backup_my.cnf
  template:
    src: backup_my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: 0600
  no_log: true

- name: Create MySQL Backup Cron
  template:
    src: cron-mysql-backup.j2
    dest: /etc/cron.d/mysql-backup

- name: Add MySQL A Records
  include_role:
    name: dns_record
    tasks_from: add_dns_records
  vars:
    record: "mysql-{{server_index + 1}}"
    value: "{{ item }}"
    type: "CNAME"
  loop: "{{ groups['db_servers'] }}"
  loop_control:
    index_var: server_index